---
AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation Template for Windows 10 EDGE Preview

Parameters:
  AMIID:
    Description: ID to locate the AMI
    Type: AWS::EC2::Image::Id
    ConstraintDescription: must be the name of an existing EC2 AMI Image
  SeleniumHubPublicIP:
    Description: Public IP of the hub
    Type: String

Resources:
  WindowsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub 'WindowsSecurityGroup-${AWS::StackName}'
      GroupDescription: Enable RDP VNC and WinRM-HTTPS access
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '5900'
        ToPort: '5900'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '3389'
        ToPort: '3389'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '5556'
        ToPort: '5556'
        CidrIp: 0.0.0.0/0

  WindowsMachine:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AMIID
      InstanceType: t2.medium
      SecurityGroups:
        - !Ref WindowsSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}
      UserData:
        "Fn::Base64":
          !Sub |
            <powershell>
            Set-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
            choco.exe install -r --no-progress -y jdk8 --timeout 2700 --failonunfound --version 8.0.152
            choco.exe install -r --no-progress -y selenium-all-drivers --timeout 2700 --failonunfound

            $vncserver = new-object System.Net.WebClient
            $vncserver.DownloadFile("https://www.tightvnc.com/download/2.8.8/tightvnc-2.8.8-gpl-setup-64bit.msi","C:\vncserver.msi")

            $seleniumserver = new-object System.Net.WebClient
            $seleniumserver.DownloadFile("http://selenium-release.storage.googleapis.com/3.8/selenium-server-standalone-3.8.1.jar", "C:\Users\IEUser\selenium-server-standalone.jar")

            Add-Content c:\selenium.bat "@ECHO OFF"
            Add-Content c:\selenium.bat "`nset JAVA_HOME=C:\Program files\Java\jdk1.8.0_152"
            Add-Content c:\selenium.bat "`nset JDK_HOME=%JAVA_HOME%"
            Add-Content c:\selenium.bat "`nset CLASSPATH=%JAVA_HOME%\lib;"
            Add-Content c:\selenium.bat "`nset PATH=%PATH%;%JAVA_HOME%\bin;"
            Add-Content c:\selenium.bat "`njava -Dwebdriver.edge.driver=`"C:\tools\selenium\MicrosoftWebDriver.exe`" -Dwebdriver.ie.driver=`"C:\tools\selenium\IEDriverServer.exe`" -jar C:\Users\IEUser\selenium-server-standalone.jar -host HOST_IP -hub http://${SeleniumHubPublicIP}:4444 -port 5556 -role node"
            
            $my_ip = Invoke-RestMethod http://ipinfo.io/json | Select -exp ip      
            (Get-Content c:\Users\IEUser\selenium-server.bat).replace('HOST_IP', $my_ip) | Set-Content c:\Users\IEUser\selenium-server.bat

            $msifile = 'C:\vncserver.msi' 
            $arguments = ' /qn /l*v ./vnc-install.log SET_USEVNCAUTHENTICATION=1 VALUE_OF_USEVNCAUTHENTICATION=1 SET_PASSWORD=1 VALUE_OF_PASSWORD=secret SET_VIEWONLYPASSWORD=1 VALUE_OF_VIEWONLYPASSWORD=viewpass SET_USECONTROLAUTHENTICATION=1 VALUE_OF_USECONTROLAUTHENTICATION=1 SET_CONTROLPASSWORD=1 VALUE_OF_CONTROLPASSWORD=secret'
            Start-Process `
                 -file $msifile `
                 -arg $arguments `
                 -passthru | wait-process

            netsh Advfirewall set allprofiles state off
            </powershell>

Outputs:
  InstanceIP:
    Description: Instance Public IP
    Value: !GetAtt WindowsMachine.PublicIp
    Export:
      Name: WindowsPublicIP
